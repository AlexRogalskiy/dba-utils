#!/bin/bash

: ${PGVER:=9.2}

LOCK_FILE_NAME=wal-cleanup.lock
LOG_FILE="/var/tmp/wal-cleanup_${PGHOST}.log"
SRC_DIR=$1
WALS_DIR=$2
REMOTE_ARCHIVE=$3
PGTOOLS=/usr/lib/postgresql/$PGVER/bin
PG_ARCHIVECLEANUP_LOG_LOCAL="/var/tmp/wal-cleanup-pg_archivecleanup_LOCAL_${PGHOST}.log"
PG_ARCHIVECLEANUP_LOG_REMOTE="/var/tmp/wal-cleanup-pg_archivecleanup_REMOTE_${PGHOST}.log"

# опции для проверки последнего нужного wal на зеркалирующем archive хосте и удаленного cleanup
cmd_timeout="1200"   # аргумент для утилиты timeout (ssh)
ssh_timeout_options="-o ConnectTimeout=10 -o ServerAliveInterval=6 -o ServerAliveCountMax=5"
ssh_options="-o Compression=no -c aes128-gcm@openssh.com -o BatchMode=yes ${ssh_timeout_options}"
ssh_master_socket='/tmp/ssh_%h_%p_%r'
ssh_master_options='-o ControlMaster=auto -o ControlPersist=yes'
ssh_options="$ssh_options -o ControlPath=$ssh_master_socket $ssh_master_options"

CWD=$(pwd) # save working dir for remote commands

unset LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES LC_TIME LC_NUMERIC
export LC_ALL=C

function usage() {
    echo "$0 is script for remove old WAL files"
    echo "usage: wal-cleanup /path/to/walshipping/src_backup /path/to/walshipping/logs REMOTE-ARCHIVE-HOST"
}

if [ -z "$SRC_DIR" -o -z "$WALS_DIR" -o -z "$REMOTE_ARCHIVE" ]; then
    usage
    exit 1
fi

LOCK_FILE="$WALS_DIR/../$LOCK_FILE_NAME"

if [ -f "$LOCK_FILE" ]; then
    echo "lock file '$LOCK_FILE' from $(date -r "$LOCK_FILE") exists, abort"
    exit 1
fi

date +%s > "$LOCK_FILE"
exec 3>&1 > "$LOG_FILE" 2>&1
trap "cat \"$LOG_FILE\" >&3; rm -f \"$LOCK_FILE\";" EXIT

echo $(date +'%F %T') "start wal-cleanup: '$SRC_DIR' '$WALS_DIR'"

if [ ! -r "$SRC_DIR"/backup_label ]; then
    echo "cannot read LOCAL $SRC_DIR/backup_label, abort"
    exit 1
fi

LAST_NEEDED_WAL_LOCAL=$(grep 'START WAL LOCATION.\+(file .\+)' "$SRC_DIR"/backup_label 2> /dev/null | sed -e 's/.\+(file \(.\+\))/\1/')
echo "LOCAL backup label: '$SRC_DIR/backup_label', last LOCAL needed wal: '$WALS_DIR/$LAST_NEEDED_WAL_LOCAL'"

if [ -z "$LAST_NEEDED_WAL_LOCAL" ]; then
    echo "cannot find last needed LOCAL wal, abort"
    exit 1
fi

if [ ! -f "$WALS_DIR"/"$LAST_NEEDED_WAL_LOCAL" ]; then
    echo "something wrong, last needed LOCAL wal not exists, abort"
    exit 1
fi

# проверим существует ли backup_label на удаленном сервере и убедимся, что это точно не ошибка ssh
no_remote_backup_label=$(timeout ${cmd_timeout} ssh $ssh_options $REMOTE_ARCHIVE "test -f \"$CWD/$SRC_DIR\"/backup_label || echo 'no backup label'")
if [ "$no_remote_backup_label" = "no backup label" ]; then
    # если backup_label нет, LAST_NEEDED_WAL_OLDEST будем читать из локального backup_label (ниже)
    echo "WARNING: backup_label at REMOTE host '$REMOTE_ARCHIVE' does not exist. No backups?"
    LAST_NEEDED_WAL_REMOTE="GGGGGGGGGGGGGGGGGGGGGGGG"
else
    # по ssh считываем backup_label на зеркалирующем архиве
    LAST_NEEDED_WAL_REMOTE=$(timeout ${cmd_timeout} ssh $ssh_options $REMOTE_ARCHIVE "grep 'START WAL LOCATION.\+(file .\+)' \"$CWD/$SRC_DIR\"/backup_label | sed -e 's/.\+(file \(.\+\))/\1/'")
fi

if [[ "$LAST_NEEDED_WAL_REMOTE" != ???????????????????????? ]]; then
    echo "something wrong, can't read last needed REMOTE wal"
    exit 1
else
    echo "REMOTE backup label: '$SRC_DIR/backup_label', last REMOTE needed wal: '$WALS_DIR/$LAST_NEEDED_WAL_REMOTE'"
fi

# выбираем самый старый wal
if [[ "$LAST_NEEDED_WAL_LOCAL" < "$LAST_NEEDED_WAL_REMOTE" ]]; then
    LAST_NEEDED_WAL_OLDEST=$LAST_NEEDED_WAL_LOCAL
else
    LAST_NEEDED_WAL_OLDEST=$LAST_NEEDED_WAL_REMOTE
fi

echo "oldest needed wal is: '$LAST_NEEDED_WAL_OLDEST'"

echo "##############################"
echo "LOCAL dry-run of pg_archivecleanup"
echo "$PGTOOLS"/pg_archivecleanup -n "$WALS_DIR" "$LAST_NEEDED_WAL_OLDEST"
date > "$PG_ARCHIVECLEANUP_LOG_LOCAL"
"$PGTOOLS"/pg_archivecleanup -n "$WALS_DIR" "$LAST_NEEDED_WAL_OLDEST" | sort >> "$PG_ARCHIVECLEANUP_LOG_LOCAL"
echo will be cleaned \~ $(($(wc -l "$PG_ARCHIVECLEANUP_LOG_LOCAL" | cut -d' ' -f1) - 1)) WALs
echo '---'
head -3 "$PG_ARCHIVECLEANUP_LOG_LOCAL"
echo . . .
tail -2 "$PG_ARCHIVECLEANUP_LOG_LOCAL"
echo '---'

echo "##############################"
echo "REMOTE dry-run of pg_archivecleanup"
date > "$PG_ARCHIVECLEANUP_LOG_REMOTE"
echo timeout ${cmd_timeout} ssh $ssh_options $REMOTE_ARCHIVE "\"$PGTOOLS\"/pg_archivecleanup -n \"$CWD/$WALS_DIR\" \"$LAST_NEEDED_WAL_OLDEST\""
timeout ${cmd_timeout} ssh $ssh_options $REMOTE_ARCHIVE "\"$PGTOOLS\"/pg_archivecleanup -n \"$CWD/$WALS_DIR\" \"$LAST_NEEDED_WAL_OLDEST\"" | sort >> "$PG_ARCHIVECLEANUP_LOG_REMOTE"
echo will be cleaned \~ $(($(wc -l "$PG_ARCHIVECLEANUP_LOG_REMOTE" | cut -d' ' -f1) - 1)) WALs
echo '---'
head -3 "$PG_ARCHIVECLEANUP_LOG_REMOTE"
echo . . .
tail -2 "$PG_ARCHIVECLEANUP_LOG_REMOTE"
echo '---'

# pg_archivecleanup не возвращает код ошибки при ошибке удаления WAL, а всегда возвращает 0, поэтому результат
# выполнения pg_archivecleanup невозможно проверить... проверяем тут только ошибки существования каталога и
# присутствие необходимых аргументов
echo "Perform LOCAL pg_archivecleanup ..."
if ! "$PGTOOLS"/pg_archivecleanup "$WALS_DIR" "$LAST_NEEDED_WAL_OLDEST"; then
    echo "error from LOCAL pg_archivecleanup, abort"
    exit 1
fi
echo "Perform REMOTE pg_archivecleanup ..."
if ! timeout ${cmd_timeout} ssh $ssh_options $REMOTE_ARCHIVE "\"$PGTOOLS\"/pg_archivecleanup \"$CWD/$WALS_DIR\" \"$LAST_NEEDED_WAL_OLDEST\""; then
    echo "error from LOCAL pg_archivecleanup, abort"
    exit 1
fi

echo $(date +'%F %T') "done wal-cleanup: '$SRC_DIR' '$WALS_DIR'"

exit 0

